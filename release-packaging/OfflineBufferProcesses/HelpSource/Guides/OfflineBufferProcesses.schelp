title:: Offline Buffer Processing Guide
summary:: This section illustrates some case uses of offline buffer processing
categories:: UGens>Buffer
related:: Classes/Buffer

description::

This section is a complement to the link::Classes/Buffer:: helpfile inasmuch as it will illustrate different ways to achieve the same result.footnote::
This was made possible thanks to the FluCoMa project (http://www.flucoma.org/) funded by the European Research Council (https://erc.europa.eu/) under the European Unionâ€™s Horizon 2020 research and innovation programme (grant agreement No 725899).::

subsection:: Motivations

At times, one might want to process a buffer in-place (overwriting its own values) or out-of-place (writing in another buffer) much faster than real-time. SuperCollider offers some built-in link::Classes/Buffer:: instance methods to do so directly on the server, and some have been added by plugins, calling the b_gen functions. Another way is to pass the buffer to the language size as a link::Classes/FloatArray:: Examples of both practice will be illustrated below with efficiency comparison.


subsection:: The 3 Methods, Compared.

Let's say we want to reverse the content of a buffer. There are 3 ways to do it: list::
##using a custom, server-side ugen (see the list below of the available functions built-in and added)
##transfering back and forth to the language side via a temporary file to disk
##transfering back and forth to the language side via OSC::

We will present the same simple code below doing the same task, and devise a list of pros and cons for each method.

strong::Method 1: server-side b_gen calls::

One can use one of the few special buffer instance methods called via the b_gen OSC command. See the link::Reference/Server-Command-Reference:: for the list of built-in task, and/or in the next subsection for an extended list.

code::
s.boot;
// load a buffer, and play it in loop
b=Buffer.read(s,Platform.resourceDir +/+ "sounds/a11wlk01.wav", action:{b.play(true,0.1)})

//benchmarking
(
//sets a responder to \b_gen, to get a timestamp the end of the game
f = { |msg, time, replyAddr, recvPort|
	    if(msg[0] == '/done') {
		c = time;
    }
};
thisProcess.addOSCRecvFunc(f);
//grabs the startup time
d = Main.elapsedTime;
//do a 101 reversing - this will glitch
101.do({b.reverse});
)

// then removes the responder, and tells you how long it takes
(
thisProcess.removeOSCRecvFunc(f);
(c-d);
)

// clean
b.free;
::

Pros:
list::
##The fastest method by far.
::

Cons:
list::
##Limited to the list of methods below
##Not easy to know when it is done without a custom OSC responder
##Does not have the capacity to generate new buffers of the right size
::

test

strong::Method 2: using sclang's FloatArray via a temporary file ::

A more flexible, albeit slower method, is to send the Buffer to a FloatArray on the language side, process it, then send it back via another temporary file. All the file handling (creation, load, deletion) is managed by the Buffer instance methods used.

code::
s.boot;
// load a buffer, and play it in loop
b=Buffer.read(s,Platform.resourceDir +/+ "sounds/a11wlk01.wav", action:{b.play(true,0.1)})

(
// grabs the start time
d = Main.elapsedTime;
// loads to a FloatArray
b.loadToFloatArray(action: {
	arg array;
	//processes the array once it is loaded, then sends it back
	b.loadCollection(array.reverse, action:{c = Main.elapsedTime;});
});
)
//time to do it once
(c-d);

// clean
b.free;
::

Pros:
list::
##much wider range of data manipulation available than on the buffer side
::
Cons:
list::
##much slower, especially if there are a lot of back and forth with a large buffer
::

strong::Method 3: using sclang's FloatArray via OSC::

Similar to Method 2 above, but instead, using many OSC messages to pass the buffer back and forth.

code::
s.boot;
// load a buffer, and play it in loop
b=Buffer.read(s,Platform.resourceDir +/+ "sounds/a11wlk01.wav", action:{b.play(true,0.1)})

(
// grabs the start time
d = Main.elapsedTime;
// loads to a FloatArray
b.getToFloatArray(action: {
	arg array;
	//processes the array once it is loaded, then sends it back
	b.sendCollection(array.reverse, action:{c = Main.elapsedTime;});
});
)
//time to do it once
(c-d);

// clean
b.free;
::

Pros:
list::
##Allows to pass data to non-local servers
::
Cons:
list::
##The slowest of all method by far
##Limited to very small buffer sizes before cluttering.
::

subsection:: A commented list of available server-based buffer offline process methods, excluding the allocators, freers, and file readers and writers.

See the link::Classes/Buffer:: helpfile for further details of use, arguments, etc.

emphasis::Setting the Buffer values:::
DEFINITIONLIST::
##.zero
||zeros all values of the buffer
##.fill
||fills sections of the buffer with constant values
##.sine1 / .sine2 / .sine3
||fills the buffer with different components of additive synthesis
##.cheby
||fills the buffer with a series of Chebyshev polynomials
::

emphasis::Changing the Buffer values:::
DEFINITIONLIST::
##.normalize
||changes the gain to fit the highest absolute value to the argument (default: 1)
##.add
||adds an offset to the value of each sample (default: 0)
##.mul
||multiplies each sample by the gain (default: -1)
##.removeDC
||applies a one-pole high-pass filter to remove any DC offset, preserving the separate channels

::

emphasis::Reordering the Buffer content:::
DEFINITIONLIST::
##.reverse
||swaps the order of samples in the buffer, from the end to the start, preserving the separate channels
##.copyData
||copies section of the buffer to a section of another buffer (or to another part of itself)
##.chunkSwap
||allows to move chunks of contiguous frames within a buffer, preserving the separate channels
##.waveSetCopyTo
||allows to copy complete wavesets to a destination buffer, preserving the separate channels
::

